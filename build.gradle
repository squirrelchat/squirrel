/*
 * Copyright (c) 2020 Squirrel Chat, All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// @todo: Pull and build React stuff

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'application'
}

mainClassName = 'chat.squirrel.Squirrel'
def versionObj = new Version(major: 0, minor: 0, revision: 1)

allprojects {
    group 'chat.squirrel'
    version versionObj.toString()
}

repositories {
    mavenCentral()
    jcenter()

    maven {
        url 'https://dl.bintray.com/michaelklishin/maven/'
    }
    maven {
        url 'https://jitpack.io'
    }
}

dependencies {
    implementation 'io.vertx:vertx-web:3.8.5'
    implementation 'io.vertx:vertx-web-client:3.8.5'
    implementation 'org.reflections:reflections:0.9.12'
    implementation 'de.mkammerer:argon2-jvm:2.6'
    implementation 'com.github.Bowser65:Tokenize:d19bbb04eb'
    implementation 'io.vertx:vertx-mail-client:3.8.5'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // Logging
    implementation 'io.sentry:sentry-logback:1.7.22'
    implementation 'ch.qos.logback:logback-classic:1.2.3'

    // Databases
    implementation 'io.lettuce:lettuce-core:5.2.2.RELEASE'
    implementation 'org.mongodb:mongodb-driver-sync:4.0.1'
    // implementation 'org.javadelight:delight-metrics:0.0.6'

    // Unit (lol like we're going to test this)
    testImplementation 'junit:junit:4.13'
}

import org.apache.tools.ant.filters.ReplaceTokens

// noinspection GroovyAssignabilityCheck
task replaceTokens(type: Copy) {
    outputs.upToDateWhen { false }

    from('src/main/java') {
        include '**/Version.java'
        filter(ReplaceTokens, tokens: [
                VERSION_MAJOR   : versionObj.major,
                VERSION_MINOR   : versionObj.minor,
                VERSION_REVISION: versionObj.revision,
                COMMIT          : getCommitHash(),
        ])
    }
    into 'build/filteredSrc'
    includeEmptyDirs = false
}

// noinspection GroovyAssignabilityCheck
task generateJavaSources(type: SourceTask) {
    outputs.upToDateWhen { false }

    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'Version.java'
    }
    source = javaSources + replaceTokens.destinationDir

    dependsOn replaceTokens
}

compileJava {
    outputs.upToDateWhen { false }

    source = generateJavaSources.source
    dependsOn generateJavaSources
}

shadowJar {
    // noinspection GroovyAssignabilityCheck, GroovyAccessibility
    archiveVersion = versionObj.toString()
}

// Utils
class Version {
    String major, minor, revision

    String toString() {
        "$major.$minor.$revision"
    }
}

static def getCommitHash() {
    def p = Runtime.getRuntime().exec("git rev-parse HEAD")
    p.waitFor()
    p.getIn().text.trim()
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
